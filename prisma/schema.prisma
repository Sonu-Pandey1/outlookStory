generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  userId    String       @id @map("_id") // Clerk's userId (this is now the primary key)
  name      String?
  email     String?      @unique
  image     String?
  createdAt DateTime?    @default(now())
  updatedAt DateTime?    @updatedAt
  posts     Post[]       // Relation to posts
  comments  Comment[]    // Relation to comments
  role      String?      // Optional role field
  likes     Like[]       // Likes
  savedPosts SavedPosts[] // Saved posts
}

model Post {
  id         String       @id @default(cuid()) @map("_id")
  createdAt  DateTime     @default(now())
  slug       String       @unique
  title      String
  desc       String
  img        String?
  views      Int          @default(0)
  catSlug    String
  cat        Category     @relation(fields: [catSlug], references: [slug])
  userId     String       // User's ID (userId, not id)
  user       User         @relation(fields: [userId], references: [userId]) // Relation to User's userId
  comments   Comment[]
  likes      Like[]
  savedPosts SavedPosts[]
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  desc      String
  userId    String   // Relating comment to user's userId
  user      User     @relation(fields: [userId], references: [userId]) // Relating to User's userId
  postSlug  String
  post      Post     @relation(fields: [postSlug], references: [slug])
}

model Category {
  id    String  @id @default(cuid()) @map("_id")
  slug  String  @unique
  title String
  img   String?
  posts Post[]
}

model Like {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  userId    String   // User's ID (userId)
  postId    String   // Post's ID
  user      User     @relation(fields: [userId], references: [userId]) // Relation to User
  post      Post     @relation(fields: [postId], references: [id])    // Relation to Post

  @@unique([userId, postId]) // A user can only like a post once
}

model SavedPosts {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  userId    String   // User's ID (userId)
  postId    String   // Post's ID
  user      User     @relation(fields: [userId], references: [userId]) // Relation to User
  post      Post     @relation(fields: [postId], references: [id])    // Relation to Post

  @@unique([userId, postId]) // A user can only save a post once
}
