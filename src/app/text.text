 {/* Right Column */}
              <div className="col-12 col-md-4 col-lg-5 col-xxl-4 my-4 ps-3 pe-3 rightColumn">
                {/* Follow Us Section */}
                <div className="followUs">
                  <div className="mb-4  d-flex justify-content-between gap-3">
                    <button className="btn btn-outline-primary w-75 ">
                      Follow Us
                    </button>
                    <span className="span ms-3 w-100"></span>
                  </div>

                  {/* Social Media Icons Section */}
                  <div className="socialContainer p-0 rounded">
                    <div
                      style={{ transition: "all 0.3s ease" }}
                      className={`row text-center g-0 border ${theme === "dark" ? "dark" : "light"
                        }`}
                    >
                      {/* Social Icon 1 */}
                      <Link
                        href={"/"}
                        style={{ transition: "all 0.3s ease" }}
                        className={`col-4 p-3 border-end border-bottom text-decoration-none ${theme === "dark" ? "text-light" : "text-dark"
                          }`}
                      >
                        <TfiYoutube className="fs-2 text-danger" />
                        <p className="m-0 fw-bold">456</p>
                        <p className="m-0">Subscribers</p>
                      </Link>

                      {/* Social Icon 2 */}
                      <Link
                        href={"/"}
                        style={{ transition: "all 0.3s ease" }}
                        className={`col-4 p-3 border-end border-bottom text-decoration-none ${theme === "dark" ? "text-light" : "text-dark"
                          }`}
                      >
                        <TfiFacebook className="fs-2 text-primary" />
                        <p className="m-0 fw-bold">789</p>
                        <p className="m-0">Followers</p>
                      </Link>

                      {/* Social Icon 3 */}
                      <Link
                        href={"/"}
                        style={{ transition: "all 0.3s ease" }}
                        className={`col-4 p-3 border-bottom text-decoration-none ${theme === "dark" ? "text-light" : "text-dark"
                          }`}
                      >
                        <TfiTwitter className="fs-2 text-info" />
                        <p className="m-0 fw-bold">320</p>
                        <p className="m-0">Followers</p>
                      </Link>

                      {/* Social Icon 4 */}
                      <Link
                        href={"/"}
                        style={{ transition: "all 0.3s ease" }}
                        className={`col-4 p-3 border-end text-decoration-none ${theme === "dark" ? "text-light" : "text-dark"
                          }`}
                      >
                        <TfiInstagram className="fs-2 text-danger" />
                        <p className="m-0 fw-bold">540</p>
                        <p className="m-0">Followers</p>
                      </Link>

                      {/* Social Icon 5 */}
                      <Link
                        href={"/"}
                        style={{ transition: "all 0.3s ease" }}
                        className={`col-4 p-3 border-end text-decoration-none ${theme === "dark" ? "text-light" : "text-dark"
                          }`}
                      >
                        <TfiLinkedin className="fs-2 text-primary" />
                        <p className="m-0 fw-bold">300</p>
                        <p className="m-0">Connections</p>
                      </Link>
                    </div>
                  </div>
                </div>

                <div className="advertisment">
                  <div className="my-4">
                    <div className="imgContainer position-relative">
                      <Image
                        className="card-img-top"
                        width={750}
                        height={450}
                        alt="advertisment-img"
                        src="https://jnews.io/magazine/wp-content/uploads/sites/34/2017/12/345x345.jpg"
                      />
                      <div
                        className={`${theme === "dark" ? "overlay" : ""}`}
                      ></div>
                    </div>
                  </div>
                </div>

                <div className="businessSection">
                  <Menu upperMenu={true} />
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* Middle Section */}
        <section className="middleSection">
          <CategoryNav />
        </section>

        {/* Bottom Section */}
        <div className="bottomSection">
          <LatestPopularPosts category={null} />
        </div>
      </div>
    </>
  );
};

export default Home;

// menifest .js

// export default function manifest() {
//     return {
//       name: 'Next.js App',
//       short_name: 'Next.js App',
//       description: 'Next.js App',
//       start_url: '/',
//       display: 'standalone',
//     //   background_color: '#fff',
//     //   theme_color: '#fff',
//       icons: [
//         {
//           src: '/favicon-32x32.png',
//           sizes: '32x32',
//           type: 'image/png',
//         },
//           {
//           src: '/favicon-16x16.png',
//           sizes: '16x16',
//           type: 'image/png',
//         },
//             {
//           src: '/android-chrome-192x192.png',
//           sizes: '192x192',
//           type: 'image/png',
//         },
//             {
//           src: '/android-chrome-512x512',
//           sizes: '512x512',
//           type: 'image/png',
//         },
//       ],
//     }
//   }

// next-sitemap.config.js

// module.exports = {
//     siteUrl: siteMetadata.siteUrl,
//     generateRobotsTxt: true,
//   }





import bcrypt from "bcrypt";
import prisma from "../lib/prisma.js";
import jwt from "jsonwebtoken";

export const register = async (req, res) => {
  console.log(req.body)
  const { username, password, email,avatar } = req.body;

  try {
    // Check if a user with the given email already exists
    const existingUser = await prisma.user.findUnique({ where: { email } });
    if (existingUser) {
      console.log("email already exists");
      return res.status(400).json({ error: "Email already exists" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = await prisma.user.create({
      data: {
        username,
        email,
        password: hashedPassword,
        avatar: avatar || "https://cdn-icons-gif.flaticon.com/8797/8797862.gif",
      },
    });

    console.log(newUser);
    res.status(201).json({ message: "user Created successfully." });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "FAiled to create user." });
  }
};

export const login = async (req, res) => {
  const { email, password } = req.body;
  // console.log(email, password);

  try {
    // check if the user exists or not
    const user = await prisma.user.findUnique({ where: { email } });

    if (!user)
      return res.status(401).json({ error: "Invalid Credentialss!" });

    // check if the password is correct

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid)
      return res.status(401).json({ error: "Invalid Credentials!" });

    // generat cookie token and send to user
    const age = 1000 * 60 * 60 * 24 * 7;

    const Token = jwt.sign({ id: user.id }, process.env.JWT_SECRET_KEY, {
      expiresIn: age,
    });

    // setting cookie---
    const { password: userPassword, ...userInfo } = user;

    res
      .cookie("token", Token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        // secure: true,
        // sameSite: "none", // "strict" to non i do then working .
        sameSite: process.env.NODE_ENV === "production" ? "none" : "lax",
        maxAge: age,
      })
      .status(200)
      .json(userInfo );
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "something went wrong" });
  }
};

export const logout = (req, res) => {
  console.log("logout");

  res.clearCookie("token", {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    sameSite: "strict",
  });

  res.status(200).json({ message: "Logout Successfully" });
};


export const google = async (req, res) => {
  try {
    const { email, name, photo } = req.body;

    if (!email || !name) {
      console.error("Missing required fields:", { email, name });
      return res.status(400).json({ error: "Email and name are required." });
    }

    let user = await prisma.user.findUnique({ where: { email } });

    const token = jwt.sign({ id: user ? user.id : null }, process.env.JWT_SECRET_KEY, {
      expiresIn: "7d",
    });

    if (user) {
      const { password, ...userInfo } = user;
      return res
        .cookie("token", token, {
          httpOnly: true,
          secure: process.env.NODE_ENV === "production",
          sameSite: process.env.NODE_ENV === "production" ? "none" : "lax",
          maxAge: 1000 * 60 * 60 * 24 * 7,
        })
        .status(200)
      .json({
        user:userInfo,
        message:"Login successfully!"
      });
    }
    // console.log(userInfo)

    const generatedPassword = Math.random().toString(36).slice(-8);
    const hashedPassword = await bcrypt.hash(generatedPassword, 10);

    const username = `${name.split(" ").join("").toLowerCase()}${Math.random().toString(36).slice(-4)}`;

    user = await prisma.user.create({
      data: {
        username,
        email,
        password: hashedPassword,
        avatar: photo || "https://cdn.pixabay.com/photo/2021/07/02/04/48/user-6380868_1280.png", 
      },
    });
 
    const { password, ...userInfo } = user;
    res
      .cookie("token", token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: process.env.NODE_ENV === "production" ? "none" : "lax",
        maxAge: 1000 * 60 * 60 * 24 * 7,
      })
      .status(200)
      .json({
        user:userInfo,
        message:"SignUp&Login successfully!"
      });
      console.log(userInfo)
  } catch (error) {
    console.error("Error during Google authentication", error);
    res.status(500).json({ error: "Something went wrong." });
  }
};






//todo --all apis done only need to intrigate for login logut fun instad of cleark ----//









/* eslint-disable react/prop-types */
import { useContext, useState } from "react";
import { useFormik } from "formik";
import "./Modal.scss";
import { NavLink, useNavigate } from "react-router-dom";
import axios from "axios";
import { AuthContext } from "../Context/AuthContext";
import Oauth from "./Oauth";
import { Bounce, toast } from "react-toastify";
import { loginSchema, signupSchema } from "../../lib/schemas/LoginLogout";

export default function Modal({ isPopupOpen, setIsPopupOpen }) {
  const [activeTab, setActiveTab] = useState("login");
  const [errorMessage, setErrorMessage] = useState("");
  const navigate = useNavigate();
  const { updateUser } = useContext(AuthContext);

  const loginFormik = useFormik({
    initialValues: {
      email: "",
      password: "",
    },
    validationSchema: loginSchema,
    onSubmit: async (values) => {
      try {
        const response = await axios.post(
          `${import.meta.env.VITE_BACKEND_BASEURL}/api/auth/login`,
          values,
          {
            headers: { "Content-Type": "application/json" },
            withCredentials: true,
          }
        );
        updateUser(response.data);
        setIsPopupOpen(false);
        navigate("/");
        toast.success("🎉 Login successful!"+ (response.data.message || ""), {
          position: "bottom-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          theme: "dark",
          transition: Bounce,
        });
        loginFormik.resetForm();
      } catch (error) {
        if (error.response && error.response.data) {
          setErrorMessage(error.response.data.message);
        } else {
          setErrorMessage("An unexpected error occurred");
        }
        toast.error("❌ "  + (error.response.data.error || ""), {
          position: "bottom-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          theme: "dark",
          transition: Bounce,
        });
      }
    },
  });

  const signupFormik = useFormik({
    initialValues: {
      username: "",
      email: "",
      password: "",
      CPassword: "",
      terms: false,
    },
    validationSchema: signupSchema,
    onSubmit: async (values) => {
      try {
        const response = await axios.post(
          `${import.meta.env.VITE_BACKEND_BASEURL}/api/auth/register`,
          values,
          {
            headers: { "Content-Type": "application/json" },
            withCredentials: true,
          }
        );
        console.log("Signup Response:", response);
        signupFormik.resetForm();
        // setIsPopupOpen(false);
        // navigate("/");
        setActiveTab("login");
        toast.success("🎉 Signup successful! You can now log in."+ (response.data.message || ""), {
          position: "bottom-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          theme: "dark",
          transition: Bounce,
        });
      } catch (error) {
        // console.error(error);
        toast.error("❌ " + (error.response.data.error || ""), {
          position: "bottom-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          theme: "dark",
          transition: Bounce,
        });
      }
    },
  });

  return (
    <>
      <div className="modalContainer">
        {isPopupOpen && (
          <div
            className="popupOverlay"
            onClick={(e) => {
              if (e.target.className === "popupOverlay") {
                setIsPopupOpen(false);
              }
            }}
            style={{
              position: "fixed",
              top: 0,
              left: 0,
              width: "100%",
              height: "100%",
              backgroundColor: "rgba(0, 0, 0, 0.5)",
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              zIndex: 1050,
            }}
          >
            <div
              className="popupForm pt-2"
              style={{
                background: "#fff",
                overflowY: "scroll",
                padding: "0px 20px",
                borderRadius: "10px",
                width: "90%",
                maxWidth: "400px",
                maxHeight: "600px",
                position: "relative",
              }}
            >
              <button
                className="closeButton btn-close"
                onClick={() => setIsPopupOpen(false)}
                style={{
                  position: "absolute",
                  top: "10px",
                  right: "10px",
                  border: "none",
                  color: "red",
                  backgroundColor: "red",
                  cursor: "pointer",
                }}
              ></button>

              <ul
                className="nav nav-tabs mb-4"
                style={{ justifyContent: "center" }}
              >
                <li className="nav-item">
                  <button
                    className={`nav-link ${
                      activeTab === "login" ? "active" : ""
                    }`}
                    onClick={() => setActiveTab("login")}
                    style={{
                      border: "none",
                      borderBottom:
                        activeTab === "login" ? "2px solid #0d6efd" : "none",
                      background: "none",
                      cursor: "pointer",
                    }}
                  >
                    Login
                  </button>
                </li>
                <li className="nav-item">
                  <button
                    className={`nav-link ${
                      activeTab === "signup" ? "active" : ""
                    }`}
                    onClick={() => setActiveTab("signup")}
                    style={{
                      border: "none",
                      borderBottom:
                        activeTab === "signup" ? "2px solid #0d6efd" : "none",
                      background: "none",
                      cursor: "pointer",
                    }}
                  >
                    Signup
                  </button>
                </li>
              </ul>

              {activeTab === "login" && (
                <form onSubmit={loginFormik.handleSubmit}>
                  <div className="mb-3">
                    <label htmlFor="loginEmail" className="form-label">
                      Email
                    </label>
                    <input
                      type="email"
                      id="loginEmail"
                      name="email"
                      placeholder="Enter your email"
                      onBlur={loginFormik.handleBlur}
                      onChange={loginFormik.handleChange}
                      value={loginFormik.values.email}
                      className={
                        loginFormik.errors.email && loginFormik.touched.email
                          ? "input-error form-control"
                          : "form-control "
                      }
                    />
                    {loginFormik.touched.email && loginFormik.errors.email && (
                      <p className="error  pt-2">{loginFormik.errors.email}</p>
                    )}
                  </div>
                  <div className="mb-3">
                    <label htmlFor="loginPassword" className="form-label">
                      Password
                    </label>
                    <input
                      type="password"
                      name="password"
                      id="loginPassword"
                      placeholder="Enter your password"
                      onChange={loginFormik.handleChange}
                      value={loginFormik.values.password}
                      onBlur={loginFormik.handleBlur}
                      className={
                        loginFormik.errors.password &&
                        loginFormik.touched.password
                          ? "input-error form-control"
                          : "form-control"
                      }
                    />
                    {loginFormik.touched.password &&
                      loginFormik.errors.password && (
                        <p className="error  pt-2">
                          {loginFormik.errors.password}
                        </p>
                      )}
                  </div>
                  <NavLink className={" text-decoration-none"}>
                    <p className=" text-end">Forgot password?</p>
                  </NavLink>
                  <button type="submit" className={`btn btn-primary w-100 `}>
                    Login
                  </button>
                  <Oauth
                    isPopupOpen={isPopupOpen}
                    setIsPopupOpen={setIsPopupOpen}
                    ra={"ram"}
                  />
                  <p className="text-center pt-3">
                    Not a Member?{" "}
                    <NavLink onClick={() => setActiveTab("signup")}>
                      Create Account
                    </NavLink>
                    {errorMessage && (
                      <p className="error-message text-danger">
                        {errorMessage}
                      </p>
                    )}
                  </p>
                </form>
              )}

              {activeTab === "signup" && (
                <form onSubmit={signupFormik.handleSubmit} className="">
                  <div className="mb-3">
                    <label htmlFor="signupUsername" className="form-label">
                      Username
                    </label>
                    <input
                      type="text"
                      id="signupUsername"
                      name="username"
                      placeholder="Choose a username"
                      onChange={signupFormik.handleChange}
                      value={signupFormik.values.username}
                      onBlur={signupFormik.handleBlur}
                      className={
                        signupFormik.errors.username &&
                        signupFormik.touched.username
                          ? "input-error form-control"
                          : "form-control"
                      }
                    />
                    {signupFormik.touched.username &&
                      signupFormik.errors.username && (
                        <p className="error pt-2">
                          {signupFormik.errors.username}
                        </p>
                      )}
                  </div>
                  <div className="mb-3">
                    <label htmlFor="signupEmail" className="form-label">
                      Email
                    </label>
                    <input
                      type="email"
                      name="email"
                      id="signupEmail"
                      placeholder="Enter your email"
                      onChange={signupFormik.handleChange}
                      value={signupFormik.values.email}
                      onBlur={signupFormik.handleBlur}
                      className={
                        signupFormik.errors.email && signupFormik.touched.email
                          ? "input-error form-control"
                          : "form-control"
                      }
                    />
                    {signupFormik.touched.email &&
                      signupFormik.errors.email && (
                        <p className="error pt-2">
                          {signupFormik.errors.email}
                        </p>
                      )}
                  </div>
                  <div className="mb-3">
                    <label htmlFor="signupPassword" className="form-label">
                      Password
                    </label>
                    <input
                      type="password"
                      id="signupPassword"
                      name="password"
                      placeholder="Choose a password"
                      onChange={signupFormik.handleChange}
                      value={signupFormik.values.password}
                      onBlur={signupFormik.handleBlur}
                      className={
                        signupFormik.errors.password &&
                        signupFormik.touched.password
                          ? "input-error form-control"
                          : "form-control"
                      }
                    />
                    {signupFormik.touched.password &&
                      signupFormik.errors.password && (
                        <p className="error pt-2">
                          {signupFormik.errors.password}
                        </p>
                      )}
                  </div>
                  <div className="mb-3">
                    <label htmlFor="signupCPassword" className="form-label">
                      Confirm Password
                    </label>
                    <input
                      type="password"
                      id="signupCPassword"
                      name="CPassword"
                      placeholder="Confirm your password"
                      onChange={signupFormik.handleChange}
                      value={signupFormik.values.CPassword}
                      onBlur={signupFormik.handleBlur}
                      className={`form-control ${
                        signupFormik.touched.CPassword &&
                        signupFormik.errors.CPassword
                          ? "input-error form-control"
                          : "form-control"
                      }`}
                    />
                    {signupFormik.touched.CPassword &&
                      signupFormik.errors.CPassword && (
                        <p className="error pt-2">
                          {signupFormik.errors.CPassword}
                        </p>
                      )}
                  </div>
                  <div className="mb-3">
                    <input
                      type="checkbox"
                      id="terms"
                      name="terms"
                      onChange={signupFormik.handleChange}
                      value={signupFormik.values.terms}
                      onBlur={signupFormik.handleBlur}
                      className={
                        signupFormik.errors.terms && signupFormik.touched.terms
                          ? "input-error "
                          : ""
                      }
                    />
                    <label htmlFor="terms" className="form-label ps-2">
                      Accept Terms & Conditions
                    </label>
                    {signupFormik.touched.terms &&
                      signupFormik.errors.terms && (
                        <p className="error ">{signupFormik.errors.terms}</p>
                      )}
                  </div>
                  <button type="submit" className="btn btn-primary w-100">
                    Signup
                  </button>
                  <Oauth
                    isPopupOpen={isPopupOpen}
                    setIsPopupOpen={setIsPopupOpen}
                    ra={"ram"}
                  />
                  <p className="text-center pt-3">
                    Already have an account?
                    <NavLink
                      onClick={() => setActiveTab("login")}
                      className={" ps-2"}
                    >
                      Log In
                    </NavLink>
                  </p>
                </form>
              )}
            </div>
          </div>
        )}
      </div>
    </>
  );
}
